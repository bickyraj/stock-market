plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'application'
}

group = 'com.basictutorials'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven/"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql'
	// Additional optional dependencies for JSON serialization/deserialization (if needed)
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-annotations'

	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.beam:beam-sdks-java-core:2.37.0'
	implementation 'org.apache.beam:beam-runners-direct-java:2.37.0'
	implementation 'org.apache.beam:beam-sdks-java-io-kafka:2.37.0'
	implementation 'org.apache.beam:beam-sdks-java-io-jdbc:2.37.0'
	implementation 'org.apache.kafka:kafka-clients:2.6.0'
	implementation 'io.confluent:kafka-avro-serializer:5.3.2'
	implementation 'io.confluent:kafka-schema-registry-client:5.3.2'
	implementation 'com.rabbitmq:amqp-client:5.13.1'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	// Optional: Spring Boot DevTools (for development convenience)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	testImplementation 'org.mockito:mockito-inline:4.0.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.named("bootRun") {
	doFirst {
		def javaHome = System.getenv("JAVA_HOME")
		println "Using JAVA_HOME: $javaHome"
		environment "JAVA_HOME", javaHome
	}
	doLast {
		println "BootRun task completed"
	}
}

sourceCompatibility = '17'
targetCompatibility = '17'
